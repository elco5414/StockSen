<!DOCTYPE html>
<html lang="en">
<head>
    <style>
      #stockSymbolInput {
        padding: 8px; /* Adjust padding as needed */
        border: 1px solid #ccc;
        border-radius: 10px; /* Adjust the border-radius for the desired roundness */
        margin-right: 10px; /* Add some space between the input and the button */
    }

    #searchButton {
        padding: 8px 12px; /* Adjust padding as needed */
        border: 1px solid #52cb8d; /* Adjust the border color */
        border-radius: 10px; /* Adjust the border-radius for the desired roundness */
        background-color: #52cb8d; /* Adjust the background color */
        color: white; /* Adjust the text color */
        cursor: pointer;
    }

    #stockPriceDropdown {
        padding: 8px; /* Adjust padding as needed */
        border: 1px solid #ccc;
        border-radius: 10px; /* Adjust the border-radius for the desired roundness */
    }
    </style>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm border-bottom">
            <div class="container">
                <button class="navbar-toggler ms-auto" type="button" data-bs-toggle="collapse" data-bs-target="#navbar-collapse" aria-controls="navbar" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbar-collapse">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link" href="/home">Home</a>
                        </li>
                        <div class="nav-item me-1">
                              <a class="nav-link" href="/invest">Invest</a>
                        </div>
                        <div class="nav-item me-1">
                          <a class="nav-link" href="/portfolio">Portfolio</a>
                        </div>
                        <div class="nav-item me-1">
                              <a class="nav-link" href="/learn">Learn</a>
                        </div>
                        <div class="nav-item me-1">
                              <a class="nav-link" href="/account">Account</a>
                        </div>
                        <div class="nav-item me-1">
                          <a class="nav-link" href="/logout">Logout</a>
                        </div>
                        <div>
                          <input type="text" id="stockSymbolInput" placeholder="e.g., AAPL">
                          <button id="searchButton">Search</button>
              
                          <!-- Add a dropdown to display stock prices -->
                          <select id="stockPriceDropdown">
                              <!-- Options will be dynamically added using JavaScript -->
                          </select>
                      </div>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container mt-4">
        <canvas id="stockChart" width="800" height="400"></canvas>
    </div>

    <!-- Bootstrap JS and Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        async function handleStockSymbolSearch() {
            const stockSymbolInput = document.getElementById('stockSymbolInput');
            const stockSymbol = stockSymbolInput.value.trim();

            if (!stockSymbol) {
                alert('Please enter a valid stock symbol.');
                return;
            }

            // Display a loading indicator
            const searchButton = document.getElementById('searchButton');
            searchButton.textContent = 'Searching...';
            searchButton.disabled = true;

            try {
                // Fetch stock prices
                const response = await fetch(`/stockData?stockSymbol=${stockSymbol}`);

                if (!response.ok) {
                    throw new Error('Failed to fetch stock data.');
                }

                const data = await response.json();

                // Update the dropdown with stock prices
                const stockPriceDropdown = document.getElementById('stockPriceDropdown');
                stockPriceDropdown.innerHTML = ''; // Clear previous options

                data.stockCandleData.timestamps.forEach((timestamp, index) => {
                    const option = document.createElement('option');
                    option.value = data.stockCandleData.closePrices[index];
                    option.text = `${new Date(timestamp * 1000).toLocaleDateString()}: $${data.stockCandleData.closePrices[index]}`;
                    stockPriceDropdown.add(option);
                });

                // Create and display the stock chart
                createAndDisplayStockChart(data.stockCandleData);

            } catch (error) {
                console.error('Error fetching stock data:', error);
                alert('Failed to fetch stock data. Please try again later.');
                
                
            } finally {
                // Remove the loading indicator
                searchButton.textContent = 'Search';
                searchButton.disabled = false;
            }
           
        }

        // Add a click event listener to the search button
        document.getElementById('searchButton').addEventListener('click', handleStockSymbolSearch);

        function createAndDisplayStockChart(stockCandleData) {
            const ctx = document.getElementById('stockChart').getContext('2d');
            const stockChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: stockCandleData.timestamps.map(timestamp => new Date(timestamp * 1000).toLocaleDateString()),
                    datasets: [{
                        label: 'Open Prices',
                        data: stockCandleData.openPrices,
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 2,
                        fill: false,
                        pointRadius: 0, // Set the point radius to 0
                    }],
                },
                options: {
                    responsive: false,
                    maintainAspectRatio: false,
                    scales: {
                        xAxes: [{
                            type: 'linear',
                            position: 'bottom',
                            ticks: {
                                autoSkip: true,
                                maxTicksLimit: 10,
                            },
                        }],
                    },
                    animation: false,
                    elements: {
                        line: {
                            tension: 0,
                        },
                    },
                },
            });
        }
    </script>

</body>
</html>